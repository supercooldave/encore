module Raw -- Rename
  
import Collections.Mutable.HashMap

  
-- parse trees for raw, uninterpreted JSON 

local trait Value
  require def raw() : String
  
  -- pattern matching functions
  require def RawString() : Maybe[String]
  require def RawNumber() : Maybe[String]
  require def RawObject() : Maybe[HashMap[Value]]
  require def RawArray()  : Maybe[[Value]]
  require def RawBool()   : Maybe[bool]
  require def Null()      : Maybe[unit]
end

class RawString : Value(str)
  val str : String
  def init(str : String) : unit
    this.str = str
  end
  
  def raw() : String
    this.str
  end
  
  def RawString() : Maybe[String]
    Just(this.str)
  end
  
  def RawNumber() : Maybe[String]
    Nothing
  end
    
  def RawObject() : Maybe[HashMap[Value]]
    Nothing
  end
    
  def RawArray()  : Maybe[[Value]]
    Nothing
  end
    
  def RawBool()   : Maybe[bool]
    Nothing
  end
    
  def Null()      : Maybe[unit]
    Nothing
  end
end

class RawNumber : Value(num)
  val num : String
  
  def init(num : String) : unit
    this.num = num
  end
  
  def raw() : String
    this.num
  end
  
  def RawString() : Maybe[String]
    Nothing
  end
  
  def RawNumber() : Maybe[String]
    Just(this.num)
  end
    
  def RawObject() : Maybe[HashMap[Value]]
    Nothing
  end
    
  def RawArray()  : Maybe[[Value]]
    Nothing
  end
    
  def RawBool()   : Maybe[bool]
    Nothing
  end
    
  def Null()      : Maybe[unit]
    Nothing
  end
end

-- curly braces wrapping comma separated name-value pairs
class RawObject : Value(hash)
  val hash : HashMap[Value]
  
  def init(hash : HashMap[Value]) : unit
    this.hash = hash
  end
  
  def raw() : String
    "not yet implemented"
  end
  def RawString() : Maybe[String]
    Nothing
  end
  
  def RawNumber() : Maybe[String]
    Nothing
  end
    
  def RawObject() : Maybe[HashMap[Value]]
    Just(this.hash)
  end
    
  def RawArray()  : Maybe[[Value]]
    Nothing
  end
    
  def RawBool()   : Maybe[bool]
    Nothing
  end
    
  def Null()      : Maybe[unit]
    Nothing
  end
end


-- square brackets wrapping ...
class RawArray : Value(elems)
  val elems : [Value]
  
  def init(elems : [Value]) : unit
    this.elems = elems
  end
  
  def raw() : String
    "not yet implemented"
  end
  
  def RawString() : Maybe[String]
    Nothing
  end
  
  def RawNumber() : Maybe[String]
    Nothing
  end
    
  def RawObject() : Maybe[HashMap[Value]]
    Nothing
  end
    
  def RawArray()  : Maybe[[Value]]
    Just(this.elems)
  end
    
  def RawBool()   : Maybe[bool]
    Nothing
  end
    
  def Null()      : Maybe[unit]
    Nothing
  end
end


class RawBool : Value(value)
  val value : bool
  
  def init(value : bool) : unit
    this.value = value
  end
  
  def raw() : String
    "not yet implemented"
  end
  
  def RawString() : Maybe[String]
    Nothing
  end
  
  def RawNumber() : Maybe[String]
    Nothing
  end
    
  def RawObject() : Maybe[HashMap[Value]]
    Nothing
  end
    
  def RawArray()  : Maybe[[Value]]
    Nothing
  end
    
  def RawBool()   : Maybe[bool]
    Just(this.value)
  end
    
  def Null()      : Maybe[unit]
    Nothing
  end
end

class Null : Value
  def raw() : String
    "not yet implemented"
  end

  def RawString() : Maybe[String]
    Nothing
  end
  
  def RawNumber() : Maybe[String]
    Nothing
  end
    
  def RawObject() : Maybe[HashMap[Value]]
    Nothing
  end
    
  def RawArray()  : Maybe[[Value]]
    Nothing
  end
    
  def RawBool()   : Maybe[bool]
    Nothing
  end
    
  def Null()      : Maybe[unit]
    Just(())
  end
end
